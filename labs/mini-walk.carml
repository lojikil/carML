#@(#) a simple walker, testing out our SExpression reader
#@(#) me: I'm tired of building a Lisp/Scheme interpreter, I want to build an ML
#@(#) also me: [build meta circular interpreter for ML IR that uses SExprs]

# just use alists for the env
def muwalk src:SExpression env:SExpression => SExpression = {

}

# the more I write in here the more I realize that I really just need
# to bite the bullet and add the simple stdlib that can be erased when
# compiling down to the source language...
#
# here, accessors are definitely the thing that I want to have, for sure
#
# also, generally herein I've been writing more like I've TCO'd things
# by hand, but it'll be nice to move towards normal accessor functions
#
# additionally, because I'm hand unrolling a lot of these rather than
# relying on the TCO to do so, we end up with very imperative looking
# lambdas. There's no real reason for this other than I know what's
# going on under the covers, and so can ignore a lot of the issues
# this can rase, but I really want to move away from this. Here too,
# having named & default parameters would help; for example, the
# `while` form below could be replaced just with a simple tail call
# with increasing parameters.
#
# this also probably should be part of mini-sexpr, and not the
# walker, but it's not terrible here either
def sexpression_eqp s0:SExpression s1:SExpression => bool = {
    var idx:int = 0
    var llen:int = 0

    # NOTE these are all wrong; I ended up decomposing them
    # correctly in mini-interp, but I need that sort of introspection
    # in carML as well; generally, other languages force you to
    # match on it, and I wonder if I'm just overthinking the
    # shortcut case here. In Go, I ended up doing:
    #
    # [source,go]
    # ----
    # if reflect.TypeOf(s0) != reflect.TypeOf(s1) {
    #     return false
    # }
    # ----
    #
    # which isn't _terrible_, but it would be nice if we could
    # do that in a simpler way. I really do think I may be overthinking
    # the issue here

    when (<> (of-constructor s0) (of-constructor s1)) do {
        # Let's use that here, and note that it isn't defined
        # what the result might be, so it's only useful for comparing
        # constructors... probably need a `constructor-of-int` and
        # `constructor-of-string` to support the various variations here
        return false
    }

    # Also, I need to use these types better
    # when deconstructing an ADT<=>Interface; for example,
    # in mini-interp, there are a LOT of places I had to add
    # a type cast, because the compiler isn't smart enough to
    # use those
    #
    # Interestingly, Haskell as a module, `Data.Data`, which
    # exposes a `toConstr` which can be used for that:
    #
    # `toConstr (BoolValue True) == toConstr (BoolValue False)`
    #
    # https://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Data.html
    # https://stackoverflow.com/questions/10112733/haskell-simple-constructor-comparison-function
    match s0 with
        (SExpression.Nil) => true
        (SExpression.EndFile) => true
        (SExpression.EndList) => true
        (SExpression.EndArray) => true
        (SExpression.Atom _  _) => (eq? (. s0 m_1) (. s1 m_1))
        (SExpression.Int _ _) => (eq? (. s0 m_1) (. s1 m_1))
        (SExpression.Float _ _) => (eq? (. s0 m_1) (. s1 m_1))
        (SExpression.Char _ _) => (eq? (. s0 m_1) (. s1 m_1))
        (SExpression.Bool _ _) => (eq? (. s0 m_1) (. s1 m_1))
        (SExpression.Error _ _) => (eq? (. s0 m_1) (. s1 m_1))
        (SExpression.String _ _) => (eq? (. s0 m_1) (. s1 m_1))
        (SExpression.List _ _) => {
            set! llen $ length $ . s0 m_1
            while (< idx llen) do {
                if (sexpression_eqp (get (. s0 m_1) idx) (get (. s1 m_1) idx)) then {
                    set! idx $ + idx 1
                } else {
                    return false
                }
            }
            return true
        }
    end
}

# ('a, list(('a, 'b))) => 'b
def assoc src:SExpression dst:SExpression => SExpression = {
    var idx:int = 0
    # same as the above really; we need to check that we
    # actually have an SExpression.List here before
    # operating, and then cast it
    var llen:int = (length (. dst m_1))
    while (< idx llen) do {
        when (sexpression_eqp (first (get (. dst m_1) idx)) src) do {
            return $ first $ rest $ get (. dst m_1) idx
        }
        set! idx $ + idx 1
    }
    # delineating Nil from Null is interesting...
    make-struct SExpression.Nil
}

# ('a, list(('a, 'b))) => bool 
def mem_assoc needle:SExpression src:SExpression => bool = {
    var idx:int = 0
    var llen:int = (length (. dst m_1))
    while (< idx llen) do {
        when (sexpression_eqp (first (get (. dst m_1) idx)) src) do {
            return true
        }
        set! idx $ + idx 1
    }
    false
}

# ('a, list('a)) => list('a)
def cons hd:SExpression dst:SExpression => SExpression = {

}

# list('a) => 'a
def first hd:SExpression => SExpression = {
    match hd with
        (SExpression.List _ _) => {
            get (. hd m_1) 0
        }
        else => (make-struct SExpression.Error "first can only be applied to lists" 0)
    end
}

# list('a) => list('a)
def rest l:SExpression => SExpression = {
    # having array/list primitives here would be great...
    # that's one thing I need to implement right away, is the basic
    # array/deque/string primitives
    var res:array[SExpression] = (make-array SExpression (- (length (. l m_1)) 1) SExpression.Null)
    var idx:int = 1
    var llen:int = (length (. l m_1))
    while (< idx llen) do {
        set! (get res (- idx 1)) (get (. l m_1) idx)
        set! idx $ + idx 1
    }
    make-struct SExpression.List res 0
}

# (('a => 'a), list('a), list(('a, 'b))) => list('a)
def map f:function[SExpression SExpression] l:SExpression e:SExpression => SExpression = {

}

def mapeval l:SExpression e:SExpression => SExpression = {
    var res:array[SExpression] = (make-array SExpression (length (. l m_1)) SExpression.Null)
    var idx:int = 0
    while (<> idx $ length $ . l m_1) do {
        set! (get res idx) (mueval (get l idx) e)
        set! idx $ + idx 1
    }
    make-struct SExpression.List res 0
}

def sexpression_boxint x:int => SExpression = {
    (make-struct SExpression.Int x 0)
}

def sexpression_boxbool b:bool => SExpression = {
    (make-struct SExpression.Bool b 0)
}

def mueval src:SExpression env:SExpression => SExpression = {
    match src with
        # NOTE (lojikil)
        # one of the first things I need to fix
        # in any new compiler going forward is
        # actualy binding things... and being able to match
        # nicely. Look at the pattern below:
        #
        # `(SExpression.Atom _ _) given (eq? (. m_1 hd) "define")`
        #
        # I need to fix things such that we can easily say:
        #
        # `SExpression.Atom "define" _) => ...`
        #
        # for one, it's much clearer what we intend, and for the other
        # it's more correct
        #

        (SExpression.List _ _) => {
            # here, we must unpack what the first member is, and
            # if it is something we can eval, we do so, otherwise
            # we just apply it
            var hd:SExpression = (get (. src m_1) 0)
            match hd with
                # I had confused the direction of `.` with the accessor methods
                # I wish carML already supported accessors...
                # Additionally, I ended up doing an inner match on the head
                # value in Go, because it required fewer casts, ala:
                #
                # [source]
                # ----
                # match hd with
                # (SExpression_Atom _ _) => match (. hd m_1) with
                #   "define" => ...
                #   end
                # end
                # ----
                #
                # because now there was just one type cast, `hd.(SExpression_Atom).m_1`
                # instead of many. Not really a big deal if we correctly generate code
                (SExpression.Atom _ _) given (eq? (. hd m_1) "define") => {
                    # add the body with that atom to the env
                }
                (SExpression.Atom _ _) given (eq? (. hd m_1) "define-value") => {
                    # add the body with that atom to the env
                }
                (SExpression.Atom _ _) given (eq? (. hd m_1) "define-mutable-value") => {
                    # add the body with that atom to the env
                }
                (SExpression.Atom _ _) given (eq? (. hd m_1) "if") => {
                    # eval the condition and either the THEN or ELSE clause
                }
                (SExpression.Atom _ _) given (eq? (. hd m_1) "call") => {
                    muapply src env
                }
                # there are several things that will come in as a SExpression.List, but
                # aren't something we need to iterate over, like `(integer "10")`
                # we have two options here:
                #
                # . just punt this back to `muapply` to handle
                # . actually convert them to the correct SExpression type here
                #
                # TODO: decide on the above
                # could be a series of guard clauses like:
                # `(SExpression.Atom _ _) given (eq? (. m_1 hd) "integer") => {`
                # but for now let's just return the remaining portion
                else => {
                    rest src
                }
            end
        }
        # TODO (lojikil): should these just be
        # a guard clause that detects simple types?
        # yes, yes they should, not even with a guard clause really 
        else => src
    end
}

def muapply src:SExpression env:SExpression => SExpression = {
    # here we have basically two tasks:
    #
    # . iterate over the list that was passed to us, calling mueval for each
    # . looking up the hd of the list, and making sure it is something we can handle
    #
    # standard McCarthy-style really
    var lst:SExpression = (make-struct SExpression.Null)
    var hd:SExpression = (make-struct SExpression.Null)

    # so the nice thing about the language we're working with here is
    # that even tho we have first class functions and what not, they
    # are *always* behind a call or the like, so we don't need to *ever*
    # eval the head of the list, we can just:
    #
    # . check that we have a list
    # . map mueval over the body of the list
    # . return the function application, if we know it

    # ok, here we need to generate:
    #
    # . Golang: reflect.TypeOf(src).Name() == "SExpression_List"
    # . C: src.tag == SEXPRESSION_LIST
    #
    # basically the C version is equivalent to `of-constructor`
    # and the Golang version just adds `.Name()`
    when (<> (tag-of-constructor src) "SExpression_List")) do {
        return src
    }

    # why `rest (rest src)`? because remember, our calls
    # come in like: `(call (identifier "+") (integer "10) (integer "20"))`
    # TODO: should make fused versions of these...
    set! lst $ mapeval (rest src) env
    set! hd $ first lst

    # let's make a calculator first
    # so... in the Go code I wrote, I ended up having
    # to do a LOT of type dispatch with the below, because
    # we can't just assume they are actually SExpression_Int, for example
    match hd with
        "+" => {
            (sexpression_boxint
                (+
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))
        }
        "-" => {
            (sexpression_boxint
                (-
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))
        }
        "*" => {
            (sexpression_boxint
                (*
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))
        }
        "/" => {
            (sexpression_boxint
                (/
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))
        }
        "<" => {
            (sexpression_boxbool
                (<
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))

        }
        "<=" => {
            (sexpression_boxbool
                (<=
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))

        }
        ">" => {
            (sexpression_boxbool
                (>
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))
        }
        ">=" => {
            (sexpression_boxbool
                (>=
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))
        }
        "<>" => {
            (sexpression_boxbool
                (<>
                    (. (first lst) m_1)
                    (. (first (rest lst)) m_1)))
        }
    end
}
