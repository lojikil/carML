# the carML compiler, written in carML

use labs/mini-sexpression

# we can start to stub out all the types of expressions
# that carML has. Probably should just generate this
# from the carML/C system, but...
type CarML {
    # I wonder if we can use another type
    # here for these...
    # name types-array [(parameter-ident type)] returnType body
    Def string array[CarML] array[tuple[string CarML]] CarML CarML
    Fn array[CarML] CarML
    ParamDef string CarML
    Declare string CarML
    # thinking these should be an array[string]
    # and an array[CarML] that way we can support
    # destructuring binds...
    Var string CarML CarML
    DestructuringVar array[string] array[CarML] CarML
    Val string CarML CarML
    DestructuringVal array[string] array[CarML] CarML
    Let string CarML CarML
    DestructuringLet array[string] array[CarML] CarML
    LetRec string CarML CarML
    DestructuringLetRec array[string] array[CarML] CarML
    Integer string
    Octal string
    Hex string
    Bin string
    Float string
    String string
    Char string
    Bool string
    ArrayLiteral CarML array[CarML]
    Ident string
    Tag string
    Begin array[CarML]
    Call CarML array[CarML]
    If CarML CarML CarML
    When CarML CarML
    Match CarML array[CarML]
    Guard CarML CarML
    While CarML CarML
    For CarML CarML
    Type string array[CarML] array[CarML]
    Record string array[string] array[CarML]
    ComplexType string array[CarML]
    Else
    IntT
    StringT
    FloatT
    CharT
    BoolT
    AnyT
    Unit
    Nil
    # NOTE: explicitly not handling things like $, =>, &c
    # may have to do that eventually too tho...
    # NOTE: actually... on second thought... it would be neat
    # if I could use this closer to something like Concrete
    # Syntax Trees...
    Comment string
    FatArrow
    PipeArrow
    Colon
    ColonEqual
    DollarSign
}

record Environment {
    # should we separate out constructor
    # names & accessors? might make sense...
    # in Digamma I made these tries, it might
    # make sense to have a tree structure for
    # these, but I think often it's not going
    # to be many of these at one time...
    type_names:array[string]
    type_defns:array[CarML]
    ctor_names:array[string]
    ctor_defns:array[CarML]
    accr_names:array[string]
    func_names:array[string]
    func_defns:array[CarML]
    recr_names:array[string]
    recr_defns:array[string]
    val_names:array[string]
    val_defns:array[string]
    var_names:array[string]
    var_defns:array[string]
    parent:ref[Environment]
}

# NOTE: so the general gist here is that we want to be able to
# round trip code from SExpressions back to CarML. For example,
# we may have several optimization passes that end up eliminating
# things, doing tree shaking, &c, and having a Compiler that can
# handle these round trips is key. However, I'm not currently
# focused on having the carML/carML compiler be able to parse
# carML itself, we can continue to use the carML/C compiler as
# a front end. This *does* mean that the carML/C compiler must
# be kept up to date with at least the language, even if the 
# simple code generation in the carML/C system cannot handle
# all the cases that it can parse

def sexpression->ast src:SExpression => CarML = {
    make-struct CarML.Nil
}

def ast->carml src:CarML => string = {
    ""
}

def ast->golang src:CarML => string = {
    ""
}

def ast->c src:CarML => string = {
    ""
}

# NOTE: section: optimizations
# we need to be able to optimize certain situations
# in carML and rewrite them to nicer alternatives. For
# example, whilst `let` is a useful abstraction, it's not
# incredibly useful when getting into actual code; we can
# use something like an alpha rewrite, to transform a `let`
# or a `letrec` into a freshsym `val` or `var`
def let->val src:CarML => CarML = {
    make-struct CarML.Nil
}
